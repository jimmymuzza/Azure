

#####################################################################################

$ADS_UF_ACCOUNTDISABLE = 2


# Replace with your Workspace ID
$CustomerId = "<SENTINELWORKSPACEID>"  

# Replace with your Primary Key
$SharedKey = "<SENTINELWORKSPACEKEY>"

# Specify the name of the record type that you'll be creating
$LogType = "WinADUsers"
$TimeStampField = ""


# Create the function to create the authorization signature
Function Build-Signature ($customerId, $sharedKey, $date, $contentLength, $method, $contentType, $resource)
{
    $xHeaders = "x-ms-date:" + $date
    $stringToHash = $method + "`n" + $contentLength + "`n" + $contentType + "`n" + $xHeaders + "`n" + $resource

    $bytesToHash = [Text.Encoding]::UTF8.GetBytes($stringToHash)
    $keyBytes = [Convert]::FromBase64String($sharedKey)

    $sha256 = New-Object System.Security.Cryptography.HMACSHA256
    $sha256.Key = $keyBytes
    $calculatedHash = $sha256.ComputeHash($bytesToHash)
    $encodedHash = [Convert]::ToBase64String($calculatedHash)
    $authorization = 'SharedKey {0}:{1}' -f $customerId,$encodedHash
    return $authorization
}


# Create the function to create and post the request
Function Post-LogAnalyticsData($customerId, $sharedKey, $body, $logType)
{
    $method = "POST"
    $contentType = "application/json"
    $resource = "/api/logs"
    $rfc1123date = [DateTime]::UtcNow.ToString("r")
    $contentLength = $body.Length
    $signature = Build-Signature `
        -customerId $customerId `
        -sharedKey $sharedKey `
        -date $rfc1123date `
        -contentLength $contentLength `
        -method $method `
        -contentType $contentType `
        -resource $resource
    $uri = "https://" + $customerId + ".ods.opinsights.azure.com" + $resource + "?api-version=2016-04-01"

    $headers = @{
        "Authorization" = $signature;
        "Log-Type" = $logType;
        "x-ms-date" = $rfc1123date;
        "time-generated-field" = $TimeStampField;
    }

 

       $response = Invoke-WebRequest -Uri $uri -Method $method -ContentType $contentType -Headers $headers -Body $body -UseBasicParsing
    return $response.StatusCode
   

}

#####################################################################################
$timeStart = Get-Date
$hybridServer = $env:COMPUTERNAME

$hybridServer

$objSearcher=[adsisearcher]""

$objSearcher.Filter = "(&(objectClass=user)(!(objectClass=computer)))"

$tmp = $objSearcher.SearchRoot.distinguishedName

$domain = $tmp.tolower().Replace(",dc=",".").Replace("dc=","")

$objSearcher.PageSize = 500

$colProplist = "trustedfordelegation","msDS-SupportedEncryptionTypes","mobile","telephoneNumber","postalcode","st","l","streetaddress","physicaldeliveryofficename","sn","givenname","objectsid","distinguishedname","description","displayname","division","info","accountExpires","samaccountname","title","mail","department","userPrincipalName","manager","employeeID", "Department","company", "title", "lastLogonTimeStamp", "EmailAddress", "whenCreated" ,"userAccountControl","pwdLastSet","extensionAttribute1","extensionAttribute2","extensionAttribute3","extensionAttribute4","extensionAttribute5","extensionAttribute6","extensionAttribute7","extensionAttribute8","extensionAttribute9","extensionAttribute10","extensionAttribute11","extensionAttribute12","extensionAttribute13","extensionAttribute14","extensionAttribute15","co" ,"c","countryCode","msExchUsageLocation","adminCount"


foreach ($i in $colPropList){$objSearcher.PropertiesToLoad.Add($i) | out-null }

$objSearcher.SearchRoot = [ADSI]"LDAP://$tmp"

$json =""
$1=""
$out =""

$allObjects = $objSearcher.FindAll()

$counter = 0

foreach ($obj in $allObjects) {

     ++$counter
     
    if ($obj.Properties.lastlogontimestamp -notlike "") {
        $lastLogin = [DateTime]::FromFileTime([Int64]::Parse($obj.Properties.lastlogontimestamp)).ToString("yyyy-MM-ddTHH:mm:ss")##
    } else { $lastLogin = "" }
    if ($obj.Properties.pwdlastset -notlike "") {
        $pwdlast = [DateTime]::FromFileTime([Int64]::Parse($obj.Properties.pwdlastset)).ToString("yyyy-MM-ddTHH:mm:ss")##
    } else { $pwdlast = "" }

     if ($obj.Properties.accountExpires -notlike "") {
        $accountExpires = [DateTime]::FromFileTime([Int64]::Parse($obj.Properties.accountExpires)).ToString("yyyy-MM-ddTHH:mm:ss")##
    } else { $accountExpires = "" }

	     if ($obj.Properties["whenCreated"] -notlike "") {
        $whenCreated = $obj.Properties["whenCreated"]
    } else { $whenCreated = "" }





$json = [ordered]@{ samAccountName = [string]$obj.properties["samAccountName"];
domain = $domain;
sid = [string](new-object System.Security.Principal.SecurityIdentifier $obj.Properties.objectsid[0],0).Value;
upn = [string]$obj.properties["userprincipalname"];
enabled= [bool](($obj.properties["useraccountcontrol"][0] -band $ADS_UF_ACCOUNTDISABLE) -eq 0);
displayName = [string]$obj.properties["displayName"][0];
givenName = [string]$obj.properties["givenName"];
company = [string]$obj.properties["company"];
sn = [string]$obj.properties["sn"];
uac = [string]$obj.properties["useraccountcontrol"];
employeeId = [string]$obj.properties["employeeId"];
dn = [string]$obj.properties["distinguishedname"];
description = $obj.properties["description"][0];
title = [string]$obj.properties["title"];
mail = [string]$obj.properties["mail"];
extensionattribute2 = [string]$obj.properties["extensionattribute2"];
extensionattribute10 = [string]$obj.properties["extensionattribute10"];
extensionattribute15 = [string]$obj.properties["extensionattribute15"];
msDSSupportedEncryptionTypes = $obj.properties["msDS-SupportedEncryptionTypes"];
department = [string]$obj.properties["department"];
division = [string]$obj.properties["division"];
trustedfordelegation = $obj.properties["trustedfordelegation"];
country =  [string]$obj.properties["co"];
countryC =  [string]$obj.properties["c"];
countryCode =  [string]$obj.properties["countryCode"];
physicaldeliveryofficename = [string]$obj.properties["physicaldeliveryofficename"];
streetaddress = [string]$obj.properties["streetaddress"];
city =  [string]$obj.properties["l"];
state =  [string]$obj.properties["st"];
postalcode = [string]$obj.properties["postalcode"];
telephone = [string]$obj.properties["telephoneNumber"];
mobile =  [string]$obj.properties["mobile"];
msExchUsageLocation =  [string]$obj.properties["msExchUsageLocation"];
managedBy =  [string]$obj.properties["manager"];
adminCount =  [string]$obj.properties["adminCount"];
accountExpires = $accountExpires;
whenCreated =$obj.Properties["whenCreated"][0];
passwordLastSet = $pwdlast;
lastLogon = $lastLogin;
script = "ListADusers";
Computer = "AzureAutomation-$hybridServer";
}| ConvertTo-Json

$json2 = [regex]::replace($json, '\\u[0-9a-f]{4}', { 
  param($match) [char] [int] ('0x' + $match.Value.Substring(2)) 
})


if (+$counter -eq 500) {
    $out = "[" + $1.TrimEnd(",") + "]"

    $counter
    Post-LogAnalyticsData -customerId $customerId -sharedKey $sharedKey -body ([System.Text.Encoding]::UTF8.GetBytes($out)) -logType $logType
 
    $1 = ""
    $counter = 0
    $out = ""

} else {

    $1 = $json2 + ",`n" + $1 

}


}

$counter
   $out = "[" + $1.TrimEnd(",") + "]"

 Post-LogAnalyticsData -customerId $customerId -sharedKey $sharedKey -body ([System.Text.Encoding]::UTF8.GetBytes($out)) -logType $logType

 











